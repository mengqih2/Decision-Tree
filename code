import sys
import math
class Question:
    def __init__(self, att_idx, threshold):
        self.att_idx = att_idx
        self.threshold = threshold
    def is_left(self, data):
        return data[self.att_idx][1] <= self.threshold
def split(data, Question):  #partition
    left_list = []
    right_list = []
    for data_pt in data:
        if Question.is_left(data_pt):
            left_list.append(data_pt)
        else:
            right_list.append(data_pt)
    return left_list, right_list
def find_label_count(data):
    count_dict = {}
    for data_pt in data:
        temp_label = data_pt[0]
        if temp_label not in count_dict.keys():
            count_dict[temp_label] = 1
        else:
            count_dict[temp_label] += 1
    return count_dict
def find_entropy(data):
    entropy = 0
    count_dict = find_label_count(data)
    for label in count_dict.keys():
        prob = count_dict[label] / float(len(data))
        entropy -= prob * math.log2(prob)
    return entropy
def find_info_gain(curr_entropy, left_data, right_data):
    prob = float(len(left_data)) / float(len(left_data) + len(right_data))
    return curr_entropy - prob*find_entropy(left_data) -(1-prob)*find_entropy(right_data)
def find_possible_thresholds(values):
    temp = []
    for i in range(len(values)-1):
        temp.append(0.5 * (values[i] + values[i+1]))
    return temp
def best_att(data):
    best_gain = -999
    best_question = None
    init_entropy = find_entropy(data)
    for i in range(1, len(data[0])):
        values = sorted([data_pt[i][1] for data_pt in data])
        thresholds = set(find_possible_thresholds(values))
        best_att_value = data[0][i][0]
        for temp_thresh in thresholds:
            temp_question = Question(i, temp_thresh)
            temp_left_list, temp_right_list = split(data, temp_question)
            if len(temp_left_list) == 0 or len(temp_right_list) == 0:
                continue
            temp_gain = find_info_gain(init_entropy, temp_left_list, temp_right_list)
            if temp_gain > best_gain or (temp_gain == best_gain and data[0][i][0] < best_att_value):
                best_att_value = data[0][i][0]
                best_gain = temp_gain
                best_question = temp_question
    return best_gain, best_question
def vote_majority_label(data):
    count_dict = find_label_count(data)
    major_label = None
    max_count = -999
    for temp_label in count_dict.keys():
        if count_dict[temp_label] > max_count:
            max_count = count_dict[temp_label]
            major_label = temp_label
        elif count_dict[temp_label] == max_count and temp_label < major_label:
            major_label = temp_label
    return major_label
class Node:
    def __init__(self, question, left_data, right_data):
        self.question = question
        self.left_data = left_data
        self.right_data = right_data
class LeafNode:
    def __init__(self, data):
        self.label = vote_majority_label(data)
def decision_tree(data, depth):
    info_gain, question = best_att(data)
    if info_gain == 0 or depth >= 2:
        return LeafNode(data)
    left_list, right_list = split(data, question)
    left_data = decision_tree(left_list, depth+1)
    right_data = decision_tree(right_list, depth+1)
    new_node = Node(question, left_data, right_data)
    return new_node
def predict_label(data, node):
    if not node:
        return None
    if isinstance(node, LeafNode):
        return node.label
    if node.question.is_left(data):
        return predict_label(data, node.left_data)
    else:
        return predict_label(data, node.right_data)
train_data = []
test_data = []
for line in sys.stdin:
    temp = line.rstrip().split()
    temp[0] = int(temp[0])
    if temp[0] > 0:
        for i in range(1, len(temp)):
            temp_tuple = temp[i].split(':')
            att = float(temp_tuple[0])
            value = float(temp_tuple[1])
            temp[i] = (att, value)
        train_data.append(temp)
    else:
        for i in range(1, len(temp)):
            temp_tuple = temp[i].split(':')
            att = float(temp_tuple[0])
            value = float(temp_tuple[1])
            temp[i] = (att, value)
        test_data.append(temp)
tree = decision_tree(train_data, 0)
for i in range(len(test_data)):
    label = predict_label(test_data[i], tree)
    print(label)
